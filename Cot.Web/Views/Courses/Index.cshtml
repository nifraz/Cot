@model ListViewModel<Course>
@{
    ViewData["Title"] = "Courses";

    var newSortOrder = (string.IsNullOrEmpty(Model.SortOrder) || Model.SortOrder == "Descending") ? "Ascending" : "Descending";
    var sortIconClass = Model.SortOrder == "Descending" ? "bi-sort-down" : "bi-sort-up";
}

<form class="p-1 pt-0 pb-2 container-fluid" method="get" style="background: url('@Url.Content("~/images/circuit-board.svg")');">
    <!--Title-->
    <div class="m-0 p-0 g-2 row">
        <div class="gap-2 col-12 d-flex align-content-center">
            <h3 class="m-0 p-0">Manage <b>Courses</b></h3>
            <a class="ms-auto btn btn-success" title="Create New" asp-action="Create"><i class="bi bi-plus-circle"></i>&nbsp;NEW</a>
        </div>
    </div>

    <!--Row-->
    <div class="m-0 p-0 g-2 row">
        <!--PageNumber-->
        <div class="col-6 col-sm-3 d-flex">
            <div class="form-floating w-100">
                <input class="form-control" placeholder="@Model.PageNumber" asp-for="PageNumber" min="1">
                <label asp-for="PageNumber"><i class="bi bi-arrow-left-right"></i>&nbsp;Page</label>
            </div>
        </div>
        <!--PageSize-->
        <div class="col-6 col-sm-3 d-flex">
            <div class="form-floating w-100">
                <input class="form-control" placeholder="@Model.PageSize" asp-for="PageSize" min="1" max="100">
                <label asp-for="PageSize"><i class="bi bi-eye"></i>&nbsp;Items</label>
            </div>
        </div>
        <!--Filter & Button-->
        <div class="gap-2 col-12 col-sm-6 d-flex">
            <div class="form-floating w-100">
                <input type="search" class="form-control" id="filter" name="FilterText" placeholder="Text" value="@Model.FilterText">
                <label for="filter"><i class="bi bi-filter"></i>&nbsp;Filter</label>
            </div>
            <input type="hidden" asp-for="SortField" />
            <input type="hidden" asp-for="SortOrder" />
            <button class="btn btn-lg btn-outline-primary" type="submit" title="Go"><i class="bi bi-arrow-right-circle"></i></button>
        </div>
    </div>

    <!--Row-->
    <div class="m-0 p-0 g-2 row">
        <!--Page Details-->
        <div class="col-auto col-sm-3 order-1 order-sm-0 d-flex align-items-end">
            <label class="small">Page: @Model.PageNumber of @Model.PagesCount</label>
        </div>
        <!--Item Details-->
        <div class="ms-auto col-auto col-sm-3 order-2 order-sm-2 d-flex justify-content-end align-items-end">
            <label class="small">Item(s): @Model.FirstItemOnPage - @Model.LastItemOnPage of @Model.TotalItemsCount @(string.IsNullOrEmpty(Model.FilterText) ? "" : $" [Filter : \"{Model.FilterText}\"]")</label>
        </div>
        <!--Pagination-->
        <div class="col-12 col-sm-6 order-0 order-sm-1 d-flex justify-content-center align-items-center">
            @Html.PagedListPager(Model.Items,
       p => Url.Action("Index", new { PageNumber = p, Model.PageSize, Model.SortField, Model.SortOrder, Model.FilterField, Model.FilterText }),
       new PagedListRenderOptions
       {
           ContainerDivClasses = new string[] { "overflow-auto" },
           UlElementClasses = new string[] { "pagination m-0" },
           LiElementClasses = new string[] { "page-item" },
           PageClasses = new string[] { "page-link" },
           DisplayLinkToFirstPage = PagedListDisplayMode.Always,
           DisplayLinkToLastPage = PagedListDisplayMode.Always,
           MaximumPageNumbersToDisplay = 5,
       })
        </div>
    </div>
</form>

<!--Table-->
<div class="p-1 table-responsive border-top">
    <table class="m-0 p-0 table table-sm table-hover" id="listTable">
        <thead>
            <tr class="align-middle">
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="Code"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Code
                        @if (Model.SortField == "Code")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="Title"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Title
                        @if (Model.SortField == "Title")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="Level"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Level
                        @if (Model.SortField == "Level")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="Type"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Type
                        @if (Model.SortField == "Type")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="AddedDate"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Added Date
                        @if (Model.SortField == "AddedDate")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <a asp-action="Index"
                       asp-route-PageNumber="@Model.PageNumber"
                       asp-route-PageSize="@Model.PageSize"
                       asp-route-SortField="ModifiedDate"
                       asp-route-SortOrder="@newSortOrder"
                       asp-route-FilterText="@Model.FilterText">
                        Modified Date
                        @if (Model.SortField == "ModifiedDate")
                        {
                            <i class="bi @sortIconClass"></i>
                        }
                    </a>
                </th>
                <th>
                    <div class="d-flex justify-content-end gap-1">ACTIONS</div>
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Items)
            {
                <tr class="align-middle">
                    @*@Html.Raw(Regex.Replace(item.Code, Model.FilterText, "<mark>" + Model.FilterText + "</mark>", RegexOptions.IgnoreCase))*@
                    <td>
                        @Html.DisplayFor(modelItem => item.Code)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Title)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Level)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Type)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.AddedDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ModifiedDate)
                    </td>
                    <td>
                        <div class="d-flex justify-content-end gap-1">
                            <a class="btn btn-sm btn-outline-info" asp-action="Details" asp-route-id="@item.Id" title="Details"><i class="bi bi-info-circle"></i></a>
                            <a class="btn btn-sm btn-outline-secondary" asp-action="Edit" asp-route-id="@item.Id" title="Edit"><i class="bi bi-pencil-square"></i></a>
                            <a class="btn btn-sm btn-outline-danger" asp-action="Delete" asp-route-id="@item.Id" title="Delete"><i class="bi bi-trash3"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ListPartial");}
}